커뮤니티 가이드 1/12 - Devise 를 이용한 인증 소개
저작자 : Markus Proske 
번역자 : 임성묵(ipes4579@gmail.com)


'커뮤니티 가이드'는 루비온레일즈에 대한 지식을 공유하기 위해 제작된 플랫폼입니다. 저는 이 커뮤니티 가이드 애플리케이션을 제작하면서 모든 절차를 문서화했고, 그리하여 제작된 것이 커뮤니티 가이드 1-12 시리즈입니다. 이 시리즈는 "어떻게 이 애플리케이션을 기획했고, 코딩했으며 그리고 배치했는가"에 대한 설명이 기록된 글입니다. 저는 이 글을 통해 레일즈 프로그래밍의 다양한 측면들(aspects)을 조명하고, 추가로 읽으면 좋은 많은 링크들을 소개합니다.


루비온레일즈 커뮤니티 가이드
----------------
루비온레일즈 커뮤니티 가이드는 오픈 소스로의 환원을 목적으로 합니다(더 자세한 것은 레일즈 커뮤니티를 참고하세요). 이 가이드는 루비온레일즈 개발에 대한 지식을 공유하는 것을 기본 모토로 합니다. 전 세계의 개발자들은 다른 개발자들로부터 지식을 취함으로 이득을 얻고, 그렇게 얻은 지식을 더욱 쉽게 풀어서 공유합니다. 모든 컨텐츠는 "Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License." 안에서 자유롭게 배포할 수 있습니다.

레일즈의 핵심에 초점을 맞춘 공식적인 '레일즈 가이드'와는 대조적으로, 커뮤니티 가이드는 레일즈와 관련된 모든 가능성에 초점을 맞추고 있습니다. 예를 들면 Gems, JQuery 그리고 호스팅 등 많은 주제들을 다룰 것 입니다. 이 가이드는 전 세계의 오픈소스 기여자(contributors)들에게 열려 있습니다. 혹시 주말을 새로운 Gem을 개발하는데 썼나요? 여러분의 프로그램 캐시 메커니즘을 최적화하는 작업을 해봤나요? 혹시 레일즈에서의 JQuery의 달인이십니까? 그럼 지금 오픈 소스와 레일즈 커뮤니티에 환원을 할 때입니다. 많은 사람들이 그 지식과 기술들을 습득할 수 있게 글을 쓰십시오. 커뮤니티 가이드는 그런 당신들이 쉽고 효율적으로 글을 퍼블리싱 할 수 있도록 텍스트타일과 문법 강조(Syntax highlighting)이 가미된 플랫폼을 제공합니다. 여러분은 이 가벼운 제출(submission) 절차를 통해 글의 품질을 보증받을 수 있습니다. 커뮤니티 가이드는 무료 서비스입니다. 적용하는데 돈이 들지 않습니다.

저는 커뮤니티 가이드를 제작하는 동안의 모든 절차들을 문서화해놓았고, 이렇게 해서 제작된 '커뮤니티 가이드 1-12 시리즈'에는 프로그램 기획, 코딩 그리고 적재 요소의 배치들까지 모두 녹아들어 있습니다. 레일즈 프로그래밍의 다양한 면들을 조명했고, 추가로 읽으면 좋은 많은 링크들을 포함했습니다. 완벽한 이해를 위해선 아래의 링크들을 따라 읽고, 이 커뮤니티 가이드 시리즈 또한 레일즈 프로그래밍을 익히기 위한 자원으로 삼을 것을 권장합니다. 

알아두십시오: 이 시리즈는 "Getting started with Rails" 메뉴얼보다 한 단계 높은 수준을 갖고 있습니다. 만약 당신이 레일즈에 이제 막 발을 담궜다면 <link>RailsGuides: Getting started</link>와 <link>Michael Hartl's Railstutorial</link>의 최소 6장까지는 병행해서 읽어 볼 것을 권장합니다. 이 커뮤니티 가이드 1-12 시리즈는 레일즈 프로그래밍의 다양한 면들을 소개하고, 간략한 설명을 동반한 많은 소스 코드를 보여 줄 것입니다. 여기서 제시되는 소스들은 완벽하지, 최적화 되지도 않았습니다. 이 글의 명령어나 코드들은 프로그래밍 중에 복사가 된 것들이고, 딱히 리팩토링 했다거나 완벽한 테스트를 거치지 않았습니다.

Article Index.
123.12.31.23

Let's get started!
-------------
몇몇의 레일즈 강좌(또한 예상하기론 몇몇  개발자들도)는 프로젝트의 시작에 코딩부터 시작하고 점진적으로 코드와 함께 생각을 발전시켜 나가는 방식을 사용하고 있습니다. 하지만 저는 사전에 많은 것을 계획해놓고 시작하는 것을 더 좋아합니다. 계획은 간단한 글을 제가 좋아하는 노트 프로그램인 Evernote에 끼적이는 것으로 시작합니다. 프로젝트의 복잡성에 따라 이 단계는 며칠에서 몇주까지 걸립니다. 일반적으로 아이디어를 추가하고, 기본적인 특징들을 정의한 후 제 데이터 모델들에 집어넣습니다. 그리곤 이미 존재하는 접근 방식들을 조사한 후 이미 만들어져 있는 Gem을 또 개발하는 일을 방지하기 위해 충분한 검색을 합니다. 피치 못하게 Gem 을 개발해야 할 경우 테스트 gems을 프로토 타입으로 제작해보거나 실현 가능성 여부를 체크할 수 있는 핵심적인 부분을 구현해봅니다. 
커뮤니티 가이드는 '원고(articles, 여러 용어가 있을 수 있겠으나 기사 보다는 원고가 맞을 것 같아 앞으로 원고라 표기한다. - 역자주)' 각각의 요소들을 작성합니다. 원고에는 여러가지 부분들이 존재합니다. 필수적인 부분은 제목(title), 티저(teaser, 메인에서 보이는 부분) 그리고 모든 내용을 갖고 있는 몸통 부분(body)이 있겠죠? 그리고 전 저작자가 글 내용을 수정한 부분을 보는 것을 좋아합니다. 왜냐하면 레일즈 버전이 새 버전으로 업데이트 되거나 사용자 의견을 반영해 특정한 Gem을 사용하게 되었을 때 변경 로그를 작성하기 때문입니다. 추가적으로, 품질 체크가 필요합니다. 저작자는 원고를 제출 할 것이고, 원고는 확인된 뒤 퍼블리싱 할 것인지 혹은 거부 할 것인지 결정하게 될 것입니다. -> 이것은 제출과 승인을 위해 상태와 날짜 정보를 포함해야 할 것을 의미합니다. 거절해야 할 경우 저작자에게 보낼 거절 메시지도 첨부해야 합니다.  -> 메시지 필드 추가. 그리고 저작자는 원고를 다시 전송하는 작업 없이 수정할 수 있도록 원고에 대한 권한을 갖고 있어야 합니다. 즉 임시 보관(freezebody) 필드를 가져야 합니다.
저작자들은 원고를 제작, 수정 그리고 평가하기 위해 우리의 사이트에 로그인 해야 합니다. 즉, 인증 절차가 필요합니다. 폼에 직접 작성 할 필요는 없습니다. 인증을 위한 좋은 Gem들이 있으니까요! 커뮤니티 가이드는 Devise 를 사용해 이것을 수행하고, 당신의 입맛에 맞는 인증 절차를 제공하기 위해 어떻게 Devise를 커스터마이징 할 수 있는가를 설명할 것입니다.
커뮤니티 가이드의 주된 모델은 User 와 Article 입니다. 원고들은 코멘트들을 가질 수 있고, 각 원고들은 점수를 매길 수 있습니다. 우리 모델들 사이에 존재하는 관계가 밑에 써 있습니다.
 - 하나의 원고는 한 명의 유저에게 속해있고(belongs to), 한 명의 유저는 많은 원고를 가질 수(have many) 있다.
 - 하나의 코멘트는 한 명의 유저와 하나의 글에 속해 있다.
 - 하나의 점수(rating)은 한 명의 유저와 하나의 글에 속해 있다.
 - 한 명의 유저는 한 나라에 속해있고, 하나의 나라는 많은 유저들을 소유한다. 

model User:
     - contry_id
     - string: name, email, weburl
     - text: shortbio

model Article:
     - user_id
     - string: title, version, message
     - text: teaser, body, changelog, freezebody
     - integer: state
     - date: submitted, accepted

model Comment:
      - user_id
      - article_id
      - text: body

model Rating:
      - user_id
      - article_id
      - integer: stars

model Country
      - name

새 프로젝트 시작

  레일즈에서 새 프로젝트를 만드는 것은 쉽습니다. 이 절차는 많은 강좌들에 설명되어 있으니 여기서 자세한 설명은 생략합니다. 우리는 스캐폴드(scaffold, 발판. 프로젝트의 제작에 대한  발판을 만든다는 뜻입니다. 루비온레일즈에서 하나의 명사, 혹 명령어로 쓰이니 스캐폴드 그대로 표현합니다 - 역자주) 생성기(generator)을 사용해 article 모델을 생성합니다. 스캐폴드는 이 모델의 기본적인 메소드 구조와 뷰, 그리고 테스트들을 제공합니다. 

>rails new communityguides
>cd communityguides
>rails generate scaffold Article user_id:integer title:string teaser:text version:string changelog:text message:string freezebody:text state:integer submitted:date accepted:date
>rake db:migrate
>rails server

만약 서버가 에러없이 잘 실행됐다면 http://localhost:3000/ 에 접속해보면 기본 레일즈 환경 문구가 나오는 것을 확인할 수 있을 겁니다. 이 화면의 파일은 public/index.html 에 위치해 있습니다. 이제 이 파일을 지워주세요! 더 이상 이 파일을 사용할 일은 없습니다.(우리가 작업할 컨트롤러의 동적 페이지보다 항상 정적 페이지를 먼저 호출합니다. 그래서 정적 페이지를 삭제해줘야합니다 -역자주) http://localhost:3000/articles 에 우리의 articles 컨트롤러가 위치해있는 것을 확인할 수 있을 겁니다. 즉시 원고를 작성할 수 있게 만들어주는 레일즈의 마법(스캐폴드라 하는)에 땡큐!

Devise 추가하기

  Devise는 레일즈를 위한 MVC솔루션(2장 참고) 을 기반으로 한 Rack(Web에 대한 처리를 해 주는 프레임워크, 혹 api 모음  정도로 알고 있으면 이 문서를 이해하는데 문제 없습니다-역자주) 입니다. 이 Gem은 가볍지만 파워풀하고, 쉽게 커스터마이징하고 확장할 수 있는 모듈 개념을 갖고 있습니다. Devise는 Github: http://github.com/plataformatec/devise 에 위치해있습니다. 이번 장에서는 자세한 설명 없이 빠르게 진행하겠습니다. 새롭고 생소해보여도 걱정하지 마세요. 사실 Devise 설정은 일반적이고 평범한 절차를 따르기 때문이죠. devise 를 설치하기 위해선 단순히 Gemfile 에 한 줄 추가하고 bundle 명령어만 입력하면 됩니다. 
>gem 'devise'
>bundle install

다음으로 Github 에서 제공하는 설치 명령을 다음과 같이 입력합니다. 
>rails generate devise:install

그러면 다음 세 가지가 뜰 것입니다.
config/environments/development.rb: add “config.action_mailer.default_url_options = { :host => ‘localhost:3000’ }”
config/routes.rb: add root :to => “article#index” (and delete public/index.html if you have not done before)
views/layouts/application.html.erb: add flash messages (we will do that later)


